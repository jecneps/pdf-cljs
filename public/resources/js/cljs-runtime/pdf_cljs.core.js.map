{"version":3,"sources":["pdf_cljs/core.cljs"],"mappings":"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","names":["js/pdf-cljs","js/pdf-cljs.core","js/pdf-cljs.core.pdfjs","pdf-cljs.core/pdfjs","pdf-cljs.core/in-range?","i","center","window","cljs.core/abs","pdf-cljs.core/in-range-slice","v","cljs.core.subvec","x__5087__auto__","y__5088__auto__","x__5090__auto__","y__5091__auto__","cljs.core/count","pdf-cljs.core/teardown-update","page","cljs.core.assoc","pdf-cljs.core/cancelled-update","pdf-cljs.core/loading-update","pdf-cljs.core/re-render-update","pdf-cljs.core/prioritize-pages","page-nums","cur-in-flight","max-in-flight","cljs.core.take","cljs.core.sort_by","cljs.core.map","pdf-cljs.core/process-in-range-pages","pages","scale","pdf-obj","p1__14832#","cljs.core.filter","cljs.core/contains?","cljs.core/vals","pages-to-load","p1__14833#","cljs.core._EQ_","cljs.core.not_EQ_","cljs.core.reduce","p__14834","vec__14835","cljs.core.nth","updates-acc","effects-acc","acc","cljs.core.get","cljs.core.conj","pdf-cljs.core/process-out-of-range-pages","p__14838","vec__14839","re_frame.core.reg_event_fx","p__14842","map__14843","cljs.core/--destructure-map","db","_","temp__5804__auto__","cljs.core.get_in","map__14844","vec__14845","center-page","window-size","pages-in-range","cljs.core.into","p__14848","vec__14849","k","pages-out-of-range","p__14852","vec__14853","updates","effects","cljs.core/concat","p__14856","vec__14857","acc-db","update-fn","cljs.core.update_in","re-frame.core/reg-fx","p__14860","vec__14861","page-obj","re-frame.core/dispatch","pdf-cljs.core/render-cancelled-fx","cljs.core/assoc","pdf-cljs.core/render-cancelled-db-update","p__14864","p__14865","map__14866","vec__14867","ocr-14870","ocr-14871","cljs.core/keyword-identical?","cljs.core.match/backtrack","e14877","js/Error","e__13152__auto__","e14878","e14879","p__14881","p__14882","map__14883","vec__14884","width","height","cljs.core/assoc-in","p1__14880#","p__14887","vec__14888","canvas","viewport","context","render-context","p__14891","p__14892","map__14893","vec__14894","canvas-ref","cljs.core.println","ctx","p__14897","p__14898","map__14899","vec__14900","temp__5802__auto__","prev-canvas","tmp-db","w","h","ocr-14903","ocr-14904","e14909","e14908","re_frame.core.reg_sub","p__14910","vec__14911","p__14914","vec__14915","pdf-cljs.core/page-spinner","pdf-cljs.core/nav-bar","cljs.core/deref","re_frame.core.subscribe","cur-page","pdf-cljs.core/pdf-page","rendered?","r","cljs.core/not","pdf-cljs.core/scale-tmp","cljs.core.atom","pdf-cljs.core/on-scroll","canvas-height","el","js/document.getElementById","scroll-top","view-height","margin","js/Math.floor","pdf-cljs.core/pdf-component","vec__14918","panel-state","page-count","cljs.core.partial","cljs.core.range","p__14921","p__14922","map__14923","vec__14924","p__14927","p__14928","map__14929","vec__14930","p__14933","vec__14934","p__14937","vec__14938","canvases","seq__14941","cljs.core/seq","chunk__14942","count__14943","i__14944","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","p__14945","p__14946","map__14947","vec__14948","url","re_frame.core.reg_event_db","p__14951","vec__14952","state","p__14955","p__14956","map__14957","vec__14958","pdfjs","p__14961","vec__14962","pdf-cljs.core/pdf-init-db","p1__14965#","cljs.core/PersistentVector","p__14966","p__14967","map__14968","vec__14969","module","shadow.esm/dynamic-import","p__14972","p__14973","map__14974","vec__14975"],"sourcesContent":["(ns pdf-cljs.core\n  (:require [clojure.core.match :refer [match]]\n            [shadow.cljs.modern :refer (js-await)]\n            [shadow.esm :as esm]\n            [re-frame.core :as rf]))\n\n(defonce ^js pdfjs nil)\n\n(defn in-range? [i center window]\n  (< (abs (- i center)) window))\n\n(defn in-range-slice [v center window]\n  (subvec v (max 0 (- center window)) (min (count v) (+ center window))))\n\n\n(defn teardown-update [page]\n  (assoc page \n         :status :inactive\n         :update nil\n         :page-obj nil))\n\n(defn cancelled-update [page]\n  (assoc page \n         :page-obj nil\n         :update :cancelled))\n\n(defn loading-update [page]\n  (assoc page\n         :status :loading))\n\n(defn re-render-update [page]\n  (assoc page\n         :update nil\n         :status :rendering))\n\n(defn prioritize-pages [page-nums cur-in-flight center max-in-flight]\n  (->> (take (- max-in-flight cur-in-flight)\n             (sort-by :dist\n                      (map (fn [i] {:i i :dist (abs (- center i))}) page-nums)))\n       (map :i)))\n\n(defn process-in-range-pages [pages scale center max-in-flight ^js pdf-obj]\n  (let [cur-in-flight (count (filter #(contains? #{:loading :rendering} (:status %)) (vals pages)))\n        pages-to-load (filter #(or (= :inactive (:status %)) \n                                   (and (= :re-render (:update %))\n                                        (not= :rendering (:status %))))\n                              (vals pages))]\n    ;; (println \"pages to load:\" pages-to-load)\n    (->> (prioritize-pages (map :index pages-to-load) cur-in-flight center max-in-flight)\n         (reduce (fn [[updates-acc effects-acc :as acc] i]\n                   (let [page (get pages i)]\n                    ;;  (println \"reduce pages\" i page)\n                     (cond\n                       (= :inactive (:status page)) [(conj updates-acc [i loading-update])\n                                                     (conj effects-acc [:pdf/load-page [pdf-obj i]])]\n                       (= :re-render (:update page)) [(conj updates-acc [i re-render-update])\n                                                      (conj effects-acc \n                                                            [:pdf/reset-page-canvas (:canvas page)]\n                                                            [:pdf/render-page\n                                                                         [scale\n                                                                          i\n                                                                          (:page-obj page)\n                                                                          (:canvas page)]])] ;;TODO(jecneps): might need to fix re-render?\n                       :else acc)))\n                 [[] []]))))\n\n(defn process-out-of-range-pages [pages]\n  ;; (println \"pages out of range, cnt=\" (count pages))\n  (reduce (fn [[updates-acc effects-acc :as acc] page]\n            (cond\n              (= :rendered (:status page)) (do\n                                            ;;  (println \"in process-out-of-page, status was rendered\")\n                                             [(conj updates-acc [(:index page) teardown-update])\n                                              (conj effects-acc [:pdf/reset-page-canvas (:canvas page)])])\n              (and (not= :cancelled (:update page)) \n                   (or (= :loading (:status page))\n                       (= :rendering (:status page)))) [(conj updates-acc [(:index page) cancelled-update]) \n                                                        effects-acc]\n              :else acc))\n          [[] []]\n          (vals pages)))\n\n(rf/reg-event-fx\n :pdf/check-for-work\n (fn [{:keys [db]} _]\n   (when-let [^js pdf-obj (get-in db [:pdf :pdf-obj])]\n     (let [pages (get-in db [:pdf :pages])\n           {:keys [center-page window-size max-in-flight scale]} (get-in db [:pdf :params])\n           pages-in-range (into {} (filter (fn [[k _]] (in-range? k center-page window-size)) pages))\n           pages-out-of-range (into {} (filter (fn [[k _]] (not (in-range? k center-page window-size))) pages))\n           [updates effects] (map concat\n                                  (process-out-of-range-pages pages-out-of-range)\n                                  (process-in-range-pages pages-in-range scale center-page max-in-flight pdf-obj))]\n       {:db (reduce (fn [acc-db [i update-fn]]\n                      (update-in acc-db [:pdf :pages i] update-fn))\n                    db\n                    updates)\n        :fx (into [] effects)\n        }))))\n\n(rf/reg-fx\n :pdf/load-page\n (fn [[^js pdf-obj i]]\n  ;;  (println \"load-page fx: \" i)\n   (js-await [^js page-obj (.getPage pdf-obj (inc i))]\n             ;(rf/dispatch-sync [:pdf/set-page-data i page])\n             (rf/dispatch [:pdf/page-loaded i page-obj]))))\n\n(defn render-cancelled-fx [db i]\n  {:db (update-in db [:pdf :pages i]\n                  assoc\n                  :update nil\n                  :status :inactive)\n   :fx [[:disptach [:pdf/check-for-work]]]})\n\n(defn render-cancelled-db-update [db i]\n  (update-in db [:pdf :pages i]\n             assoc\n             :update nil\n             :status :inactive))\n\n(rf/reg-event-fx\n :pdf/page-loaded\n (fn [{:keys [db]} [_ i ^js page-obj]]\n   (let [page (get-in db [:pdf :pages i])\n         scale (get-in db [:pdf :params :scale])]\n     (match [ (:update page) (nil? (:canvas page))]\n       [:cancelled _] (render-cancelled-fx db i)\n       [_ true] {:db (update-in db [:pdf :pages i]\n                                assoc\n                                :status :waiting-for-canvas\n                                :page-obj page-obj)}\n       [_ false] (do \n                  ;;  (println \"page-loaded about to call render\")\n                   {:db (update-in db [:pdf :pages i]\n                                 assoc\n                                 :status :rendering\n                                 :page-obj page-obj)\n                  :fx [[:pdf/render-page [scale i page-obj (:canvas page)]]]})))))\n\n(rf/reg-event-fx\n :pdf/new-canvas-size\n (fn [{:keys [db]} [_ width height]]\n   (if (or (not= width (get-in db [:pdf :params :canvas-width]))\n           (not= height (get-in db [:pdf :params :canvas-height])))\n     {:db (-> db\n              (assoc-in [:pdf :params :canvas-width] width)\n              (assoc-in [:pdf :params :canvas-height] height))\n      :fx [[:pdf/resize-canvases [(->> (get-in db [:pdf :pages])\n                                       (vals)\n                                       (filter #(= :inactive (:status %))) ;TODO(jecneps): feel like possible obscure concureny bug\n                                       (map :canvas)) \n                                  width\n                                  height]]]}\n     {})))\n\n(rf/reg-fx\n :pdf/render-page\n (fn [[scale i ^js page-obj canvas]]\n  ;;  (println \"in rerender: \" i scale page-obj canvas)\n   (let [viewport (.getViewport page-obj #js {:scale scale})\n         context (.getContext canvas \"2d\")\n         render-context #js {:canvasContext context\n                             :viewport viewport}]\n     (set! canvas -height (.-height viewport))\n     (set! canvas -width (.-width viewport))\n    ;;  (println \"render-page\")\n     (js-await [_ (.-promise (.render page-obj render-context))]\n               (rf/dispatch [:pdf/page-rendered i]))\n     (rf/dispatch [:pdf/new-canvas-size (.-width viewport) (.-height viewport)]))))\n\n(rf/reg-event-fx\n :pdf/page-rendered\n (fn [{:keys [db]} [_ i]]\n  ;;  (println \"page was rendered: \" i)\n   (let [scale (get-in db [:pdf :params :scale])\n         page (get-in db [:pdf :pages i])]\n    ;;  (println \"page \" page)\n     (if (= :re-render (:update page))\n       {:db (update-in db [:pdf :pages i] assoc :update nil)\n        :fx [[:pdf/reset-page-canvas (:canvas page)]\n             [:pdf/render-page [scale i (:page-obj page) (:canvas page)]]]}\n       {:db (update-in db [:pdf :pages i] assoc :status :rendered)\n        :fx [[:dispatch [:pdf/check-for-work]]]}))))\n\n(rf/reg-fx\n :pdf/reset-page-canvas\n (fn [canvas-ref]\n   (println \"reset canvas\")\n   (let [ctx (.getContext canvas-ref \"2d\")]\n     (.reset ctx))))\n\n;;#########################################################################\n; Glue\n;;#########################################################################\n\n(rf/reg-event-fx\n :pdf/canvas-mounted\n (fn [{:keys [db]} [_ i canvas]]\n   (println \"canvas mounted\")\n   (if-let [prev-canvas (get-in db [:pdf :pages i :canvas])]\n     (do\n       {})\n     (let [tmp-db (assoc-in db [:pdf :pages i :canvas] canvas)\n           w (get-in db [:pdf :params :canvas-width])\n           h (get-in db [:pdf :params :canvas-height])]\n        ;;  (do\n        ;;    (println \"canvas w\" (.-width canvas))\n        ;;    (set! canvas -width w)\n        ;;    (println \"canvas w\" (.-width canvas)))\n       (set! canvas -width w)\n       (set! canvas -height h)\n       (match [(get-in db [:pdf :pages i :status])\n               (get-in db [:pdf :pages i :update])]\n         [:waiting-for-canvas :cancelled] {:db (render-cancelled-db-update tmp-db i)}\n         [:waiting-for-canvas _] {:db (assoc-in tmp-db [:pdf :pages i :status] :rendering)\n                                  :fx [[:pdf/render-page [(get-in db [:pdf :params :scale])\n                                                          i\n                                                          (get-in db [:pdf :pages i :page-obj])\n                                                          canvas]]]}\n         :else {:db tmp-db})))))\n\n(rf/reg-sub\n :pdf/panel-state\n (fn [db]\n   (println \"in panel-state sub\")\n   (get-in db [:pdf :panel-state])))\n\n(rf/reg-sub\n :pdf/page-rendered?\n (fn [db [_ i]]\n   (= :rendered (get-in db [:pdf :pages i :status]))))\n\n(rf/reg-sub\n :pdf/pdf-obj\n (fn [db _]\n   (println \"in pdf-obj sub\")\n   (get-in db [:pdf :pdf-obj])))\n\n(rf/reg-sub\n :pdf/page-count\n (fn [db _]\n   (println \"in page-count sub\")\n   (get-in db [:pdf :params :page-count])))\n\n(rf/reg-sub\n :pdf/canvas-size\n (fn [db _]\n   [(get-in db [:pdf :params :canvas-width])\n    (get-in db [:pdf :params :canvas-height])]))\n\n(rf/reg-sub\n :pdf/params\n (fn [db [_ k]]\n   (get-in db [:pdf :params k])))\n\n\n;;#########################################################################\n; Components\n;;#########################################################################\n\n(defn page-spinner []\n  [:div {:style {:background-color \"red\" :width \"100%\" :height \"100%\"}}])\n\n(defn nav-bar []\n  (println \"navbar!!\")\n  (let [scale @(rf/subscribe [:pdf/params :scale])\n        cur-page @(rf/subscribe [:pdf/params :center-page])]\n    [:div {:width \"100%\" :height \"50px\" :style {:display \"flex\" :flex-direction \"row\" }}\n     [:button {:on-click #(rf/dispatch [:pdf/view-scale-changed (+ scale 0.25)])} \"+\"]\n     [:button {:on-click #(rf/dispatch [:pdf/view-scale-changed (- scale 0.25)])} \"-\"]\n     [:span (str \"Zoome=\" scale)]\n     [:span (str \"Page=\" cur-page)]]))\n\n(defn pdf-page [i]\n  (println \"pdf-page component\")\n  (let [rendered? @(rf/subscribe [:pdf/page-rendered? i])\n        ;[width height] @(rf/subscribe [:pdf/canvas-size])\n        ]\n    [:div {:style {:margin \"10px\"}}\n     [:canvas {:ref (fn [r]\n                      (when (not (nil? r))\n                        (rf/dispatch [:pdf/canvas-mounted i r])))\n              ;;  :height height\n              ;;  :width width\n               }]\n     (when (not rendered?)\n       (page-spinner))\n       \n     ;text layer highlight stuff here, when page is rendered\n     ]))\n\n(def scale-tmp (atom 0.5))\n\n(defn on-scroll [canvas-height _]\n  (let [el (js/document.getElementById \"page-container\")\n        scroll-top (.-scrollTop el)\n        view-height (.-clientHeight el)\n        margin 10\n        center-page (js/Math.floor (/ (+ scroll-top (/ view-height 2)) (+ canvas-height (* 2 margin))))] \n    (rf/dispatch [:pdf/maybe-new-center-page center-page])))\n\n(defn pdf-component []\n  (let [panel-state @(rf/subscribe [:pdf/panel-state]) ;; :closed | :fullscreen | :open \n        page-count @(rf/subscribe [:pdf/page-count])\n        [_ height] @(rf/subscribe [:pdf/canvas-size])] \n    (println \"pdf-component render fn\")\n    (println panel-state page-count)\n    [:div {:style {:height \"100vh\"}}\n     (nav-bar)\n     [:div {:style {:display \"flex\" :flex-direction \"column\" :align-items \"center\" :height \"100%\"}}\n      (if (nil? page-count)\n        [:div \"LOADING PDF\"]\n        (into [:div {:style {:display \"flex\"\n                             :flex-direction \"column\"\n                             :overflow \"scroll\"} :id \"page-container\" :on-scroll (partial on-scroll height)}]\n              (map pdf-page (range page-count))))]]))\n\n\n;;#########################################################################\n;;#########################################################################\n\n\n\n;;########################################################################\n;; Top Level User Initiated Events\n;;########################################################################\n(rf/reg-event-fx\n :pdf/maybe-new-center-page\n (fn [{:keys [db]} [_ center-page]]\n   (if (not= center-page (get-in db [:pdf :params :center-page]))\n     {:db (assoc-in db [:pdf :params :center-page] center-page)\n      :fx [[:dispatch [:pdf/check-for-work]]]\n      }\n     {:db db})))\n\n\n(rf/reg-event-fx\n :pdf/view-scale-changed\n (fn [{:keys [db]} [_ scale]]\n   (let [center (get-in db [:pdf :center-page])\n         window (get-in db [:pdf :window-size])\n         pages (get-in db [:pdf :pages])]\n     {:db (reduce (fn [acc-db [i page]]\n                    (if (or (= :rendered (:status page))\n                            (= :rendering (:status page)))\n                      (do\n                        (println \"re-rendering page\" i page)\n                       (update-in acc-db [:pdf :pages i] assoc :update :re-render))\n                      acc-db))\n                  (assoc-in db [:pdf :params :scale] scale)\n                  (get-in db [:pdf :pages]))\n      :fx [\n           [:dispatch [:pdf/check-for-work]]]})))\n\n(rf/reg-fx\n :pdf/resize-canvases\n (fn [[canvases width height]]\n   (println \"reaize ALL OF THEM\")\n   (println (count canvases))\n   (doseq [canvas canvases]\n     (set! canvas -width width)\n     (set! canvas -height height))))\n\n;; DONE(jecneps): what if click to send open event but pdfjs hasn't loaded yet?\n(rf/reg-event-fx\n :pdf/quote-clicked\n (fn [{:keys [db]} [_ url]]\n   {:db (assoc-in db [:pdf :params :center-page] 1) ;TODO(jecneps): derive from quote info\n    :fx [[:pdf/load-pdf [(:pdfjs db) url]]\n         (when (= :closed (get-in db [:pdf :panel-state]))\n           [:pdf/set-pdf-panel-state :open])]}))\n\n(rf/reg-event-db\n :pdf/set-pdf-panel-state\n (fn [db [_ state]]\n   (assoc-in db [:pdf :panel-state] state)))\n\n;;########################################################################\n;; Top Level Initialization\n;;########################################################################\n\n;TODO(jecneps): command-queue seems like bad name\n(rf/reg-event-fx\n :pdf/pdf-load-request\n (fn [{:keys [db]} [_ url]]\n   (if-let [^js pdfjs (get-in db [:pdf :pdfjs])] \n       {:fx [[:pdf/load-pdf [pdfjs url]]]}\n     {:db (assoc-in db [:pdf :command-queue] url)})))\n\n(rf/reg-fx\n :pdf/load-pdf\n (fn [[^js pdfjs url]] \n   (js-await [^js pdf-obj (.-promise (.getDocument pdfjs url))]\n            \n               (rf/dispatch [:pdf/pdf-loaded pdf-obj]))))\n\n(defn pdf-init-db [db ^js pdf-obj]\n  (let [page-count (.-numPages pdf-obj)]\n    (-> db\n        (assoc-in [:pdf :pdf-obj] pdf-obj)\n        (assoc-in [:pdf :command-queue] nil)\n        (update-in [:pdf :params]\n                   assoc\n                   :window-size 10\n                   :center-page 0\n                   :max-in-flight 5\n                   :scale 1\n                   :canvas-width 595\n                   :canvas-height 842\n                   :page-count page-count)\n        (assoc-in [:pdf :pages] (into {} (map #(vector % {:index %\n                                                          :status :inactive})\n                                              (range page-count)))))))\n\n(rf/reg-event-fx\n :pdf/pdf-loaded\n (fn [{:keys [db]} [_ ^js pdf-obj]] \n     {:db (pdf-init-db db pdf-obj)\n      :fx [[:dispatch [:pdf/check-for-work]]]\n      }))\n\n(rf/reg-event-fx\n :pdf/page-start\n (fn [_ _]\n   {:fx [[:pdf/load-external-pdfjs]]}))\n\n(rf/reg-fx\n :pdf/load-external-pdfjs\n (fn [_]\n   (js-await [^js module (esm/dynamic-import \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/4.0.189/pdf.min.mjs\")]\n             (set! (.. module -GlobalWorkerOptions -workerSrc) \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/4.0.189/pdf.worker.min.mjs\")\n             (rf/dispatch [:pdf/pdfjs-loaded module]))))\n\n(rf/reg-event-fx\n :pdf/pdfjs-loaded\n (fn [{:keys [db]} [_ ^js pdfjs]]\n   {:db (assoc-in db [:pdf :pdfjs] pdfjs)\n    :fx (when-let [url (get-in db [:pdf :command-queue])]\n          [[:pdf/load-pdf [pdfjs url]]])}))"]}