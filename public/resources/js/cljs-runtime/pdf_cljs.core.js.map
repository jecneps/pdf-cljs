{"version":3,"sources":["pdf_cljs/core.cljs"],"mappings":"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","names":["js/pdf-cljs","js/pdf-cljs.core","js/pdf-cljs.core.pdfjs","pdf-cljs.core/pdfjs","pdf-cljs.core/in-range?","i","center","window","cljs.core/abs","pdf-cljs.core/in-range-slice","v","cljs.core.subvec","x__5087__auto__","y__5088__auto__","x__5090__auto__","y__5091__auto__","cljs.core/count","pdf-cljs.core/teardown-update","page","cljs.core.assoc","pdf-cljs.core/cancelled-update","pdf-cljs.core/loading-update","pdf-cljs.core/re-render-update","pdf-cljs.core/prioritize-pages","page-nums","cur-in-flight","max-in-flight","cljs.core.take","cljs.core.sort_by","cljs.core.map","pdf-cljs.core/process-in-range-pages","pages","scale","pdf-obj","p1__34473#","cljs.core.filter","cljs.core/contains?","cljs.core/vals","pages-to-load","p1__34474#","cljs.core._EQ_","cljs.core.not_EQ_","cljs.core.reduce","p__34475","vec__34476","cljs.core.nth","updates-acc","effects-acc","acc","cljs.core.get","cljs.core.conj","pdf-cljs.core/process-out-of-range-pages","p__34479","vec__34480","re_frame.core.reg_event_fx","p__34483","map__34484","cljs.core/--destructure-map","db","_","temp__5804__auto__","cljs.core.get_in","map__34485","vec__34486","center-page","window-size","pages-in-range","cljs.core.into","p__34489","vec__34490","k","pages-out-of-range","p__34493","vec__34494","updates","effects","cljs.core/concat","p__34497","vec__34498","acc-db","update-fn","cljs.core.update_in","re-frame.core/reg-fx","p__34501","vec__34502","page-obj","re-frame.core/dispatch","pdf-cljs.core/render-cancelled-fx","cljs.core/assoc","pdf-cljs.core/render-cancelled-db-update","p__34505","p__34506","map__34507","vec__34508","ocr-34511","ocr-34512","cljs.core/keyword-identical?","cljs.core.match/backtrack","e34518","js/Error","e__21480__auto__","e34519","e34520","p__34521","vec__34522","canvas","viewport","context","render-context","p__34525","p__34526","map__34527","vec__34528","canvas-ref","ctx","p__34531","p__34532","map__34533","vec__34534","tmp-db","cljs.core/assoc-in","ocr-34537","ocr-34538","e34543","e34542","re_frame.core.reg_sub","p__34544","vec__34545","pdf-cljs.core/page-spinner","pdf-cljs.core/pdf-page","cljs.core/deref","re_frame.core.subscribe","r","pdf-cljs.core/pdf-component","panel-state","pdf","page-count","cljs.core.range","p__34548","p__34549","map__34550","vec__34551","G__34554","cljs.core/Keyword","p__34555","p__34556","map__34557","vec__34558","url","re_frame.core.reg_event_db","p__34561","vec__34562","state","p__34565","p__34566","map__34567","vec__34568","temp__5802__auto__","pdfjs","p__34571","vec__34572","pdf-cljs.core/pdf-init-db","p1__34575#","cljs.core/PersistentVector","p__34576","p__34577","map__34578","vec__34579","module","shadow.esm/dynamic-import","p__34582","p__34583","map__34584","vec__34585"],"sourcesContent":["(ns pdf-cljs.core\n  (:require [clojure.core.match :refer [match]]\n            [shadow.cljs.modern :refer (js-await)]\n            [shadow.esm :as esm]\n            [re-frame.core :as rf]))\n\n(defonce ^js pdfjs nil)\n\n(defn in-range? [i center window]\n  (< (abs (- i center)) window))\n\n(defn in-range-slice [v center window]\n  (subvec v (max 0 (- center window)) (min (count v) (+ center window))))\n\n\n(defn teardown-update [page]\n  (assoc page \n         :status :inactive\n         :update nil\n         :page-obj nil))\n\n(defn cancelled-update [page]\n  (assoc page \n         :page-obj nil\n         :update :cancelled))\n\n(defn loading-update [page]\n  (assoc page\n         :status :loading))\n\n(defn re-render-update [page]\n  (assoc page\n         :update nil))\n\n(defn prioritize-pages [page-nums cur-in-flight center max-in-flight]\n  (->> (take (- max-in-flight cur-in-flight)\n             (sort-by :dist\n                      (map (fn [i] {:i i :dist (abs (- center i))}) page-nums)))\n       (map :i)))\n\n(defn process-in-range-pages [pages scale center max-in-flight ^js pdf-obj]\n  (let [cur-in-flight (count (filter #(contains? #{:loading :rendering} (:status %)) (vals pages)))\n        pages-to-load (filter #(or (= :inactive (:status %)) \n                                   (and (= :re-render (:update %))\n                                        (not= :rendering (:status %))))\n                              (vals pages))]\n    (->> (prioritize-pages (map :index pages-to-load) cur-in-flight center max-in-flight)\n         (reduce (fn [[updates-acc effects-acc :as acc] i]\n                   (let [page (get pages i)]\n                     (cond\n                       (= :inactive (:status page)) [(conj updates-acc [i loading-update])\n                                                     (conj effects-acc [:pdf/load-page [pdf-obj i]])]\n                       (= :re-render (:update page)) [(conj updates-acc [i re-render-update])\n                                                      (conj effects-acc [:pdf/render-page\n                                                                         [scale\n                                                                          i\n                                                                          (:page-obj page)\n                                                                          (:canvas page)]])] ;;TODO(jecneps): might need to fix re-render?\n                       :else acc)))\n                 [[] []]))))\n\n(defn process-out-of-range-pages [pages]\n  (reduce (fn [[updates-acc effects-acc :as acc] page]\n            (cond\n              (= :rendered (:status page)) [(conj updates-acc [(:index page) teardown-update])\n                                            (conj effects-acc [:pdf/reset-page-canvas (:canvas page)])]\n              (and (not= :cancelled (:update page)) \n                   (or (= :loading (:status page))\n                       (= :rendering (:status page)))) [(conj updates-acc [(:index page) cancelled-update]) \n                                                        effects-acc]\n              :else acc))\n          [[] []]\n          pages))\n\n(rf/reg-event-fx\n :pdf/check-for-work\n (fn [{:keys [db]} _]\n   (when-let [^js pdf-obj (get-in db [:pdf :pdf-obj])]\n     (let [pages (get-in db [:pdf :pages])\n           {:keys [center-page window-size max-in-flight scale]} (get-in db [:pdf :params])\n           pages-in-range (into {} (filter (fn [[k _]] (in-range? k center-page window-size)) pages))\n           pages-out-of-range (into {} (filter (fn [[k _]] (not (in-range? k center-page window-size))) pages))\n           [updates effects] (map concat\n                                  (process-out-of-range-pages pages-out-of-range)\n                                  (process-in-range-pages pages-in-range scale center-page max-in-flight pdf-obj))]\n       {:db (reduce (fn [acc-db [i update-fn]]\n                      (update-in acc-db [:pdf i] update-fn))\n                    db\n                    updates)\n        :fx (into [] effects)}))))\n\n(rf/reg-fx\n :pdf/load-page\n (fn [[^js pdf-obj i]]\n   (js-await [^js page-obj (.getPage pdf-obj (inc i))]\n             ;(rf/dispatch-sync [:pdf/set-page-data i page])\n             (rf/dispatch [:pdf/page-loaded i page-obj]))))\n\n(defn render-cancelled-fx [db i]\n  {:db (update-in db [:pdf :pages i]\n                  assoc\n                  :update nil\n                  :status :inactive)\n   :fx [[:disptach [:pdf/check-for-work]]]})\n\n(defn render-cancelled-db-update [db i]\n  (update-in db [:pdf :pages i]\n             assoc\n             :update nil\n             :status :inactive))\n\n(rf/reg-event-fx\n :pdf/page-loaded\n (fn [{:keys [db]} [_ i ^js page-obj]]\n   (let [page (get-in db [:pdf :pages i])\n         scale (get-in db [:pdf :params :scale])]\n     (match [ (:update page) (nil? (:canvas page))]\n       [:cancelled _] (render-cancelled-fx db i)\n       [_ true] {:db (update-in db [:pdf :pages i]\n                                assoc\n                                :state :waiting-for-canvas\n                                :page-obj page-obj)}\n       [_ false] {:db (update-in db [:pdf :pages i]\n                                 assoc\n                                 :state :rendering\n                                 :page-obj page-obj)\n                  :fx [[:pdf/render-page [scale i page-obj (:canvas page)]]]}))))\n\n(rf/reg-fx\n :pdf/render-page\n (fn [[scale i ^js page-obj canvas]]\n   (let [viewport (.getViewport page-obj #js {:scale scale})\n         context (.getContext canvas \"2d\")\n         render-context #js {:canvasContext context\n                             :viewport viewport}]\n     (set! canvas -height (.-height viewport))\n     (set! canvas -width (.-width viewport))\n     (js-await [_ (.-promise (.render page-obj render-context))]\n               (rf/dispatch [:pdf/page-rendered i])))))\n\n(rf/reg-event-fx\n :pdf/page-rendered\n (fn [{:keys [db]} [_ i]]\n   (let [scale (get-in db [:pdf :params :scale])\n         page (get-in db [:pdf :pages i])]\n     (if (= :re-render (:update page))\n       {:db (update-in db [:pdf :pages i] assoc :update nil)\n        :fx [[:pdf/render-page [scale i (:page-obj page) (:canvas page)]]]}\n       {:db (update-in db [:pdf :pages i] assoc :status :rendered)\n        :fx [[:dispatch [:pdf/check-for-work]]]}))))\n\n(rf/reg-fx\n :pdf/reset-page-canvas\n (fn [canvas-ref]\n   (let [ctx (.getContext canvas-ref \"2d\")]\n     (. ctx reset))))\n\n;;#########################################################################\n; Glue\n;;#########################################################################\n\n(rf/reg-event-fx\n :pdf/canvas-mounted\n (fn [{:keys [db]} [_ i canvas]]\n   (let [tmp-db (assoc-in db [:pdf :pages i :canvas] canvas)] \n     (match [(get-in db [:pdf :pages i :state])\n             (get-in db [:pdf :pages i :update])]\n       [:waiting-for-canvas :cancelled] {:db (render-cancelled-db-update tmp-db i)}\n       [:waiting-for-canvas _] {:db (assoc-in tmp-db [:pdf :pages i :state] :rendering)\n                                :fx [[:pdf/render-page [(get-in db [:pdf :params :scale])\n                                                        i\n                                                        (get-in db [:pdf :pages i :page-obj])\n                                                        canvas]]]}\n       :else {:db tmp-db}))))\n\n(rf/reg-sub\n :pdf/panel-state\n (fn [db]\n   (get-in db [:pdf :panel-state])))\n\n(rf/reg-sub\n :pdf/page\n (fn [db [_ i]]\n   (get-in db [:pdf :pages i])))\n\n(rf/reg-sub\n :pdf/pdf-obj\n (fn [db _]\n   (get-in db [:pdf :pdf-obj])))\n\n(rf/reg-sub\n :pdf/page-count\n (fn [db _]\n   (get-in db [:pdf :params :page-count])))\n\n;;#########################################################################\n; Components\n;;#########################################################################\n\n(defn page-spinner []\n  [:div {:style {:background-color \"red\" :width \"100px\" :height \"100px\"}}])\n\n(defn pdf-page [i]\n  (let [page @(rf/subscribe [:pdf/page i])]\n    [:div\n     [:canvas {:ref (fn [r]\n                      (when (not (nil? r))\n                        (rf/dispatch [:pdf/canvas-mounted i r])))}]\n     (when (not (= :rendered (:status page)))\n       (page-spinner))\n     ;text layer highlight stuff here, when page is rendered\n     ]))\n\n(defn pdf-component []\n  (let [panel-state @(rf/subscribe [:pdf/panel-state]) ;; :closed | :fullscreen | :open\n        pdf @(rf/subscribe [:pdf/pdf-obj])\n        page-count @(rf/subscribe [:pdf/page-count])]\n    [:div\n     [:div {:style {:display \"flex\" :flex-direction \"column\" :align-items \"center\"}}\n      (if (nil? pdf)\n        [:div \"LOADING PDF\"]\n        (into [:div {:style {:display \"flex\" :flex-direction \"column\"}}]\n              (map pdf-page (range page-count))))]]))\n\n\n;;#########################################################################\n;;#########################################################################\n\n\n\n;;########################################################################\n;; Top Level User Initiated Events\n;;########################################################################\n\n(rf/reg-event-fx\n :pdf/view-scale-changed\n (fn [{:keys [db]} [_ scale]]\n   (let [center (get-in db [:pdf :center-page])\n         window (get-in db [:pdf :window-size])\n         pages (get-in db [:pdf :pages])]\n     {:db (-> db\n              (assoc-in [:pdf :params :scale] scale)\n              (update-in [:pdf :pages] (fn [pages] ;TODO(jecneps): old data shape, update to work at all\n                                         (into [] (map (fn [page]\n                                                         (case (:status page)\n                                                           :rendered (assoc page :update :re-render)\n                                                           :else page)) \n                                                       pages)))))\n      :fx [[:dispatch [:pdf/check-for-work]]]})))\n\n;; DONE(jecneps): what if click to send open event but pdfjs hasn't loaded yet?\n(rf/reg-event-fx\n :pdf/quote-clicked\n (fn [{:keys [db]} [_ url]]\n   {:db (assoc-in db [:pdf :params :center-page] 1) ;TODO(jecneps): derive from quote info\n    :fx [[:pdf/load-pdf [(:pdfjs db) url]]\n         (when (= :closed (get-in db [:pdf :panel-state]))\n           [:pdf/set-pdf-panel-state :open])]}))\n\n(rf/reg-event-db\n :pdf/set-pdf-panel-state\n (fn [db [_ state]]\n   (assoc-in db [:pdf :panel-state] state)))\n\n;;########################################################################\n;; Top Level Initialization\n;;########################################################################\n\n;TODO(jecneps): command-queue seems like bad name\n(rf/reg-event-fx\n :pdf/pdf-load-request\n (fn [{:keys [db]} [_ url]]\n   (if-let [^js pdfjs (get-in db [:pdf :pdfjs])] \n       {:fx [[:pdf/load-pdf [pdfjs url]]]}\n     {:db (assoc-in db [:pdf :command-queue] url)})))\n\n(rf/reg-fx\n :pdf/load-pdf\n (fn [[^js pdfjs url]] \n   (js-await [^js pdf-obj (.-promise (.getDocument pdfjs url))]\n            \n               (rf/dispatch [:pdf/pdf-loaded pdf-obj]))))\n\n(defn pdf-init-db [db ^js pdf-obj]\n  (let [page-count (.-numPages pdf-obj)]\n    (-> db\n        (assoc-in [:pdf :pdf-obj] pdf-obj)\n        (assoc-in [:pdf :command-queue] nil)\n        (update-in [:pdf :params]\n                   assoc\n                   :window-size 50\n                   :center-page 0\n                   :max-in-flight 5\n                   :scale 1.5\n                   :page-count page-count)\n        (assoc-in [:pdf :pages] (into {} (map #(vector % {:index %\n                                                          :status :inactive})\n                                              (range page-count)))))))\n\n(rf/reg-event-fx\n :pdf/pdf-loaded\n (fn [{:keys [db]} [_ ^js pdf-obj]] \n     {:db (pdf-init-db db pdf-obj)\n      :fx [[:dispatch [:pdf/check-for-work]]]}))\n\n(rf/reg-event-fx\n :pdf/page-start\n (fn [_ _]\n   {:fx [[:pdf/load-external-pdfjs]]}))\n\n(rf/reg-fx\n :pdf/load-external-pdfjs\n (fn [_]\n   (js-await [^js module (esm/dynamic-import \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/4.0.189/pdf.min.mjs\")]\n             (set! (.. module -GlobalWorkerOptions -workerSrc) \"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/4.0.189/pdf.worker.min.mjs\")\n             (rf/dispatch [:pdf/pdfjs-loaded module]))))\n\n(rf/reg-event-fx\n :pdf/pdfjs-loaded\n (fn [{:keys [db]} [_ ^js pdfjs]]\n   {:db (assoc-in db [:pdf :pdfjs] pdfjs)\n    :fx (when-let [url (get-in db [:pdf :command-queue])]\n          [[:pdf/load-pdf [pdfjs url]]])}))"]}